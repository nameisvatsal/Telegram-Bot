from typing import Final
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

TOKEN: Final ='6982102448:AAEe0jY6Y3hoQIMFJcWbV-gPpOm_hkQXw3g'
BOT_USERNAME: Final ='@project_2_psvbot'

#commands

async def start_command(update: Update,context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('Hello, Thanks for waiting for me')

    
async def help_command(update: Update,context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('Please type something do that i can respond')

    
async def custom_command(update: Update,context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('This is a custom command')

#responses
    
def handle_responses(text: str) -> str:
    if 'hello' in text:
        return 'hey there!'
    
    if 'how are you' in text:
        return 'im fine, wby?'
    
    if 'whatsup' in text:
        return 'nothin much'
    
    return    'i do not understand what you wrote....'
    
async def handle_message(update: Update,context: ContextTypes.DEFAULT_TYPE):
    message_type: str = update.message.chat.type
    text: str = update.message.text

    print(f'User({update.message.chat.id}) in {message_type}: "{text}"')

    if message_type == 'group':
        if BOT_USERNAME in text:
            new_text: str = text.replace(BOT_USERNAME, '').strip()
            response: str=handle_responses(new_text)
        else:
            return
    else:
        response: str=handle_responses(text)

    print('Bot:',response)
    await update.message.reply_text(response)

async def error(update: Update,context: ContextTypes.DEFAULT_TYPE):
    print(f'Update {update} caused error {context.error}')
    
    if __name__ == '__main__':
        print('starting bot ....')
        app = Application.builder.token(TOKEN).build()
#commands
        app.add_handler(CommandHandler('start', start_command))
        app.add_handler(CommandHandler('help', help_command))
        app.add_handler(CommandHandler('custom', custom_command))

#messages
        app.add_handler(MessageHandler(filters.TEXT, handle_message))

#error
        app.add_error_handler(error)

#polls the bot
        print('polling...')
        app.run_polling(poll_interval=3)
